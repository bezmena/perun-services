#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Data::Dumper;

sub processResourceMember;
sub processGroupMember;
sub processResource;
sub processGroup;
sub processResourceMail;
sub saveResourceMailsToFile;
sub saveUsersToFile;
sub saveGroupsToFile;

#our $SERVICE_NAME     = "contoso_o365";
#our $PROTOCOL_VERSION = "3.0.0";
#my $SCRIPT_VERSION = "3.0.0";

#perunServicesInit::init;
#my $DIRECTORY = perunServicesInit::getDirectory;
my $SERVICE_NAME = "o365_mu";
my $DIRECTORY = $ARGV[1];
my $data = $ARGV[2];
print "Running contoso_o365 sn: " . $SERVICE_NAME . "\n";
#my $data      = perunServicesInit::getDataWithGroups;

#-------------------------------------------------------------------------
# CONSTANTS AND DEFINITIONS
#-------------------------------------------------------------------------

our $A_GR_AD_NAME;                           *A_GR_AD_NAME =                           \'urn:perun:group_resource:attribute-def:def:adName';
our $A_F_DOMAIN_NAME;                        *A_F_DOMAIN_NAME =                        \'urn:perun:facility:attribute-def:def:o365DomainName';
our $A_MR_O365_SEND_AS;                      *A_MR_O365_SEND_AS =                      \'urn:perun:member_group:attribute-def:def:o365SendAs';
our $A_U_O365_MAIL_ADDRS;                    *A_U_O365_MAIL_ADDRS =                    \'urn:perun:user:attribute-def:def:o365EmailAddresses:mu';
our $A_UF_DISABLE_MAIL_FORWARD;              *A_UF_DISABLE_MAIL_FORWARD =              \'urn:perun:user_facility:attribute-def:def:disableO365MailForward';
our $A_UF_LOGIN;                             *A_UF_LOGIN =                             \'urn:perun:user_facility:attribute-def:virt:login';
our $A_UF_O365_MAIL_FORWARD;                 *A_UF_O365_MAIL_FORWARD =                 \'urn:perun:user_facility:attribute-def:def:o365MailForward';
our $A_UF_O365_ARCHIVE;                      *A_UF_O365_ARCHIVE =                      \'urn:perun:user_facility:attribute-def:def:o365MailInPlaceArchive';
our $A_UF_O365_STORE_AND_FORWARD;            *A_UF_O365_STORE_AND_FORWARD =            \'urn:perun:user_facility:attribute-def:def:o365MailStoreAndForward';
our $A_UF_O365_LICENCE;                      *A_UF_O365_LICENCE =                      \'urn:perun:user_facility:attribute-def:def:o365Licence';
our $A_U_F_O365_PREFERRED_LANGUAGE;          *A_U_F_O365_PREFERRED_LANGUAGE =          \'urn:perun:user_facility:attribute-def:def:o365PreferredLanguage';
our $A_R_IS_FOR_O365_GROUP;                  *A_R_IS_FOR_O365_GROUP =                  \'urn:perun:resource:attribute-def:def:isForO365Group';
our $A_F_ID;                                 *A_F_ID =                                 \'urn:perun:facility:attribute-def:core:id';
our $A_R_O365_RES_NAME;                      *A_R_O365_RES_NAME =                      \'urn:perun:resource:attribute-def:def:o365ResourceName';
our $A_R_O365_RES_ALIAS;                     *A_R_O365_RES_ALIAS =                     \'urn:perun:resource:attribute-def:def:o365ResourceAlias';
our $A_R_O365_RES_EMAIL_ADDRESES;            *A_R_O365_RES_EMAIL_ADDRESES =            \'urn:perun:resource:attribute-def:def:o365ResourceEmailAddresses';
our $A_R_O365_RES_DISPLAY_NAME;              *A_R_O365_RES_DISPLAY_NAME =              \'urn:perun:resource:attribute-def:def:o365ResourceDisplayName';
our $A_R_O365_RES_TYPE;                      *A_R_O365_RES_TYPE =                      \'urn:perun:resource:attribute-def:def:o365ResourceType';
our $A_R_O365_RES_CAPACITY;                  *A_R_O365_RES_CAPACITY =                  \'urn:perun:resource:attribute-def:def:o365ResourceCapacity';
our $A_R_O365_RES_ADDITIONAL_RESPONSE;       *A_R_O365_RES_ADDITIONAL_RESPONSE =       \'urn:perun:resource:attribute-def:def:o365ResourceAdditionalResponse';
our $A_R_O365_RES_EXT_MEETING_MSG;           *A_R_O365_RES_EXT_MEETING_MSG =           \'urn:perun:resource:attribute-def:def:o365ResourceProcessExternalMeetingMessages';
our $A_R_O365_RES_ALLOW_CONFLICTS;           *A_R_O365_RES_ALLOW_CONFLICTS =           \'urn:perun:resource:attribute-def:def:o365ResourceAllowConflicts';
our $A_R_O365_RES_BOOKING_WINDOW;            *A_R_O365_RES_BOOKING_WINDOW =            \'urn:perun:resource:attribute-def:def:o365ResourceBookingWindowInDays';
our $A_R_O365_RES_PERCENTAGE_ALLOWED;        *A_R_O365_RES_PERCENTAGE_ALLOWED =        \'urn:perun:resource:attribute-def:def:o365ResourceConflictPercentageAllowed';
our $A_R_O365_RES_ENFORCE_SCHED_HORIZON;     *A_R_O365_RES_ENFORCE_SCHED_HORIZON =     \'urn:perun:resource:attribute-def:def:o365ResourceEnforceSchedulingHorizon';
our $A_R_O365_RES_MAX_CONFLICT_INSTANCES;    *A_R_O365_RES_MAX_CONFLICT_INSTANCES =    \'urn:perun:resource:attribute-def:def:o365ResourceMaximumConflictInstances';
our $A_R_O365_RES_MAX_DURATION;              *A_R_O365_RES_MAX_DURATION =              \'urn:perun:resource:attribute-def:def:o365ResourceMaximumDurationInMinutes';
our $A_R_O365_RES_SCHED_DURING_WORK_HOURS;   *A_R_O365_RES_SCHED_DURING_WORK_HOURS =   \'urn:perun:resource:attribute-def:def:o365ResourceScheduleOnlyDuringWorkHours';
our $A_R_O365_RES_ALL_BOOK_IN_POLICY;        *A_R_O365_RES_ALL_BOOK_IN_POLICY =        \'urn:perun:resource:attribute-def:def:o365ResourceAllBookInPolicy';
our $A_R_O365_RES_ALL_REQ_IN_POLICY;         *A_R_O365_RES_ALL_REQ_IN_POLICY =         \'urn:perun:resource:attribute-def:def:o365ResourceAllRequestInPolicy';
our $A_R_O365_RES_ALL_REQ_OUT_OF_POLICY;     *A_R_O365_RES_ALL_REQ_OUT_OF_POLICY =     \'urn:perun:resource:attribute-def:def:o365ResourceAllRequestOutOfPolicy';
our $A_R_O365_RES_WORKDAYS;                  *A_R_O365_RES_WORKDAYS =                  \'urn:perun:resource:attribute-def:def:o365ResourceWorkdays';
our $A_R_O365_RES_WORKING_HOURS_START_TIME;  *A_R_O365_RES_WORKING_HOURS_START_TIME =  \'urn:perun:resource:attribute-def:def:o365ResourceWorkingHoursStartTime';
our $A_R_O365_RES_WORKING_HOURS_END_TIME;    *A_R_O365_RES_WORKING_HOURS_END_TIME =    \'urn:perun:resource:attribute-def:def:o365ResourceWorkingHoursEndTime';
our $A_R_O365_RES_ALLOW_RECURRING_MEETINGS;  *A_R_O365_RES_ALLOW_RECURRING_MEETINGS =  \'urn:perun:resource:attribute-def:def:o365ResourceAllowRecurringMeetings';
our $A_R_O365_RES_ADD_ADDITIONAL_RESPONSE;   *A_R_O365_RES_ADD_ADDITIONAL_RESPONSE =   \'urn:perun:resource:attribute-def:def:o365ResourceAddAdditionalResponse';
our $A_GR_O365_RES_BOOK_IN_POLICY;           *A_GR_O365_RES_BOOK_IN_POLICY =           \'urn:perun:group_resource:attribute-def:def:o365ResourceBookInPolicy';
our $A_GR_O365_RES_REQUEST_IN_POLICY;        *A_GR_O365_RES_REQUEST_IN_POLICY =        \'urn:perun:group_resource:attribute-def:def:o365ResourceRequestInPolicy';
our $A_GR_O365_RES_REQUEST_OUT_OF_POLICY;    *A_GR_O365_RES_REQUEST_OUT_OF_POLICY =    \'urn:perun:group_resource:attribute-def:def:o365ResourceRequestOutOfPolicy';
our $A_GR_O365_RES_DELEGATES;                *A_GR_O365_RES_DELEGATES =                \'urn:perun:group_resource:attribute-def:def:o365ResourceDelegates';

our $RES_NAME_TEXT = "RES_NAME";
our $RES_ALIAS_TEXT = "RES_ALIAS";
our $RES_EMAIL_ADDRESES_TEXT = "RES_EMAIL_ADDRESES";
our $RES_DISPLAY_NAME_TEXT = "RES_DISPLAY_NAME";
our $RES_TYPE_TEXT = "RES_TYPE";
our $RES_CAPACITY_TEXT = "RES_CAPACITY";
our $RES_ADDITIONAL_RESPONSE_TEXT = "RES_ADDITIONAL_RESPONSE";
our $RES_EXT_MEETING_MSG_TEXT = "RES_EXT_MEETING_MSG";
our $RES_ALLOW_CONFLICTS_TEXT = "RES_ALLOW_CONFLICTS";
our $RES_BOOKING_WINDOW_TEXT = "RES_BOOKING_WINDOW";
our $RES_PERCENTAGE_ALLOWED_TEXT = "RES_PERCENTAGE_ALLOWED";
our $RES_ENFORCE_SCHED_HORIZON_TEXT = "RES_ENFORCE_SCHED_HORIZON";
our $RES_MAX_CONFLICT_INSTANCES_TEXT = "RES_MAX_CONFLICT_INSTANCES";
our $RES_MAX_DURATION_TEXT = "RES_MAX_DURATION";
our $RES_SCHED_DURING_WORK_HOURS_TEXT = "RES_SCHED_DURING_WORK_HOURS";
our $RES_ALL_BOOK_IN_POLICY_TEXT = "RES_ALL_BOOK_IN_POLICY";
our $RES_ALL_REQ_IN_POLICY_TEXT = "RES_ALL_REQ_IN_POLICY";
our $RES_ALL_REQ_OUT_OF_POLICY_TEXT = "RES_ALL_REQ_OUT_OF_POLICY";
our $RES_WORKDAYS_TEXT = "RES_WORKDAYS";
our $RES_WORKING_HOURS_START_TIME_TEXT = "RES_WORKING_HOURS_START_TIME";
our $RES_WORKING_HOURS_END_TIME_TEXT = "RES_WORKING_HOURS_END_TIME";
our $RES_ALLOW_RECURRING_MEETINGS_TEXT = "RES_ALLOW_RECURRING_MEETINGS";
our $RES_ADD_ADDITIONAL_RESPONSE_TEXT = "RES_ADD_ADDITIONAL_RESPONSE";
our $RES_DELEGATES_TEXT = "RES_DELEGATES";
our $RES_BOOK_IN_POLICY_TEXT = "RES_BOOK_IN_POLICY";
our $RES_REQUEST_IN_POLICY_TEXT = "RES_REQUEST_IN_POLICY";
our $RES_REQUEST_OUT_OF_POLICY_TEXT = "RES_REQUEST_OUT_OF_POLICY";
our $UPN_TEXT = "UPN";
our $MAIL_FORWARD_TEXT = "mailForward";
our $ARCHIVE_TEXT = "archive";
our $STORE_AND_FORWARD_TEXT = "storeAndForward";
our $EMAIL_ADDRESSES = "emailAddresses";
our $PREFERED_LANGUAGE = "preferedLanguage";
our $TIMEZONE = "timezone";

#Default forwarding domain for MU
our $DEFAULT_FORWARDING_DOMAIN = '@mo.muni.cz';

#-------------------------------------------------------------------------
# GLOBAL DATA STRUCTURES
#-------------------------------------------------------------------------

our $users = {};
our $skippedUsers = {};
our $groups = {};
our $resourceMails = {};

#-------------------------------------------------------------------------
# PROCESSING FACILITY
#-------------------------------------------------------------------------

my %facilityAttributes = attributesToHash $data->getAttributes;

my $facilityId = $facilityAttributes{$A_F_ID};
my $domainName = $facilityAttributes{$A_F_DOMAIN_NAME};

unless($facilityId) { die "Facility id can't be empty, it is used to find directory with cache and active users from AD!\n"; }
unless($domainName) { die "Domain name can't be empty for service o365_mu!\n"; }

#-------------------------------------------------------------------------
# PROCESSING RESOURCES
#-------------------------------------------------------------------------

foreach my $resource ( $data->getChildElements ) {
	processResource $resource, $domainName;
}

#-------------------------------------------------------------------------
# SAVE ALL REQUIRED DATA TO FILES
#-------------------------------------------------------------------------

my $usersFileName = "$DIRECTORY/$SERVICE_NAME" . "_users.json";
my $groupsFileName = "$DIRECTORY/$SERVICE_NAME" . "_groups.json";
my $resourceMailsFileName = "$DIRECTORY/$SERVICE_NAME" . "_resource-mails.json";

saveUsersToFile $usersFileName, $users;
saveGroupsToFile $groupsFileName, $groups;
saveResourceMailsToFile $resourceMailsFileName, $resourceMails;

#-------------------------------------------------------------------------
# FINALIZING
#-------------------------------------------------------------------------

#perunServicesInit::finalize;

#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
# SUBS
#-------------------------------------------------------------------------
#-------------------------------------------------------------------------

# input: resourceData structure, domain name
# process data about a resource (it also process data about its members and groups)
sub processResource {

	my $resourceData = shift;
	my $domainName = shift;

	my %resourceAttributes = attributesToHash $resourceData->getAttributes;

	#define attributes for processing o365 groups and o365 resource maling lists
	my $isForO365Group = $resourceAttributes{$A_R_IS_FOR_O365_GROUP};
	my $resName = $resourceAttributes{$A_R_O365_RES_NAME};

	#process all members from resource (users data)
	foreach my $member (($resourceData->getChildElements)[1]->getChildElements) {
		processResourceMember $member;
	}

	#if resource mail name exists, process it as resource mail (resource-mails data)
	if($resName) {
		#prevent duplicity in resource name
		if($resourceMails->{$resName}) { die "There is a duplicity of two Resources with the same resourceMailName: $resName\n"; }

		processResourceMail $resourceData;
	}

	#if resource is set as o365 resource, process it with all it's groups (groups data)
	if($isForO365Group) {
		foreach my $group (($resourceData->getChildElements)[0]->getChildElements){
			processGroup $group;
		}
	}

}

# input: resourceData structure
# process data about resource mailing list
sub processResourceMail {
	my $resourceData = shift;

	my %resourceAttributes = attributesToHash $resourceData->getAttributes;
	my $resName = $resourceAttributes{$A_R_O365_RES_NAME};
	my @workdays = ();

	#process all resource mail attributes
	$resourceMails->{$resName}->{$RES_NAME_TEXT} = $resName;
	$resourceMails->{$resName}->{$RES_ALIAS_TEXT}  = $resourceAttributes{$A_R_O365_RES_ALIAS} ? $resourceAttributes{$A_R_O365_RES_ALIAS} : undef;
	$resourceMails->{$resName}->{$RES_EMAIL_ADDRESES_TEXT} = $resourceAttributes{$A_R_O365_RES_EMAIL_ADDRESES} ? $resourceAttributes{$A_R_O365_RES_EMAIL_ADDRESES} : ();
	$resourceMails->{$resName}->{$RES_DISPLAY_NAME_TEXT} = $resourceAttributes{$A_R_O365_RES_DISPLAY_NAME} ? $resourceAttributes{$A_R_O365_RES_DISPLAY_NAME} : undef;
	$resourceMails->{$resName}->{$RES_TYPE_TEXT} = $resourceAttributes{$A_R_O365_RES_TYPE} ? $resourceAttributes{$A_R_O365_RES_TYPE} : undef;
	$resourceMails->{$resName}->{$RES_CAPACITY_TEXT} = $resourceAttributes{$A_R_O365_RES_CAPACITY} ? $resourceAttributes{$A_R_O365_RES_CAPACITY} : undef;
	$resourceMails->{$resName}->{$RES_ADDITIONAL_RESPONSE_TEXT} = $resourceAttributes{$A_R_O365_RES_ADDITIONAL_RESPONSE} ? $resourceAttributes{$A_R_O365_RES_ADDITIONAL_RESPONSE} : undef;
	$resourceMails->{$resName}->{$RES_EXT_MEETING_MSG_TEXT} = $resourceAttributes{$A_R_O365_RES_EXT_MEETING_MSG} ? $JSON::XS::true : $JSON::XS::false;
	$resourceMails->{$resName}->{$RES_ALLOW_CONFLICTS_TEXT} = $resourceAttributes{$A_R_O365_RES_ALLOW_CONFLICTS} ? $JSON::XS::true : $JSON::XS::false;
	$resourceMails->{$resName}->{$RES_BOOKING_WINDOW_TEXT} = $resourceAttributes{$A_R_O365_RES_BOOKING_WINDOW} ? $resourceAttributes{$A_R_O365_RES_BOOKING_WINDOW} : undef;
	$resourceMails->{$resName}->{$RES_PERCENTAGE_ALLOWED_TEXT} = $resourceAttributes{$A_R_O365_RES_PERCENTAGE_ALLOWED} ? $resourceAttributes{$A_R_O365_RES_PERCENTAGE_ALLOWED} : undef;
	$resourceMails->{$resName}->{$RES_ENFORCE_SCHED_HORIZON_TEXT} = $resourceAttributes{$A_R_O365_RES_ENFORCE_SCHED_HORIZON} ? $JSON::XS::true : $JSON::XS::false;
	$resourceMails->{$resName}->{$RES_MAX_CONFLICT_INSTANCES_TEXT} = $resourceAttributes{$A_R_O365_RES_MAX_CONFLICT_INSTANCES} ? $resourceAttributes{$A_R_O365_RES_MAX_CONFLICT_INSTANCES} : undef;
	$resourceMails->{$resName}->{$RES_MAX_DURATION_TEXT} = $resourceAttributes{$A_R_O365_RES_MAX_DURATION} ? $resourceAttributes{$A_R_O365_RES_MAX_DURATION} : undef;
	$resourceMails->{$resName}->{$RES_SCHED_DURING_WORK_HOURS_TEXT} = $resourceAttributes{$A_R_O365_RES_SCHED_DURING_WORK_HOURS} ? $JSON::XS::true : $JSON::XS::false;
	$resourceMails->{$resName}->{$RES_ALL_BOOK_IN_POLICY_TEXT} = $resourceAttributes{$A_R_O365_RES_ALL_BOOK_IN_POLICY} ? $JSON::XS::true : $JSON::XS::false;
	$resourceMails->{$resName}->{$RES_ALL_REQ_IN_POLICY_TEXT} = $resourceAttributes{$A_R_O365_RES_ALL_REQ_IN_POLICY} ? $JSON::XS::true : $JSON::XS::false;
	$resourceMails->{$resName}->{$RES_ALL_REQ_OUT_OF_POLICY_TEXT} = $resourceAttributes{$A_R_O365_RES_ALL_REQ_OUT_OF_POLICY} ? $JSON::XS::true : $JSON::XS::false;
	$resourceMails->{$resName}->{$RES_WORKDAYS_TEXT} = $resourceAttributes{$A_R_O365_RES_WORKDAYS} ? $resourceAttributes{$A_R_O365_RES_WORKDAYS} : \@workdays;
	$resourceMails->{$resName}->{$RES_WORKING_HOURS_START_TIME_TEXT} = $resourceAttributes{$A_R_O365_RES_WORKING_HOURS_START_TIME} ? $resourceAttributes{$A_R_O365_RES_WORKING_HOURS_START_TIME} : undef;
	$resourceMails->{$resName}->{$RES_WORKING_HOURS_END_TIME_TEXT} = $resourceAttributes{$A_R_O365_RES_WORKING_HOURS_END_TIME} ? $resourceAttributes{$A_R_O365_RES_WORKING_HOURS_END_TIME} : undef;
	$resourceMails->{$resName}->{$RES_ALLOW_RECURRING_MEETINGS_TEXT} = $resourceAttributes{$A_R_O365_RES_ALLOW_RECURRING_MEETINGS} ? $JSON::XS::true : $JSON::XS::false;
	$resourceMails->{$resName}->{$RES_ADD_ADDITIONAL_RESPONSE_TEXT} = $resourceAttributes{$A_R_O365_RES_ADD_ADDITIONAL_RESPONSE} ? $JSON::XS::true : $JSON::XS::false;

	my @resDelegates = ();
	my @resBookInPolicy = ();
	my @resReqInPolicy = ();
	my @resReqOutOfPolicy = ();

	foreach my $groupData (($resourceData->getChildElements)[0]->getChildElements) {
		my %groupAttributes = attributesToHash $groupData->getAttributes;

		my $onResourceBookInPolicy = $groupAttributes{$A_GR_O365_RES_BOOK_IN_POLICY};
		my $onResourceRequestInPolicy = $groupAttributes{$A_GR_O365_RES_REQUEST_IN_POLICY};
		my $onResourceRequestOutOfPolicy = $groupAttributes{$A_GR_O365_RES_REQUEST_OUT_OF_POLICY};
		my $onResourceDelegates = $groupAttributes{$A_GR_O365_RES_DELEGATES};

		foreach my $memberData(($groupData->getChildElements)[1]->getChildElements) {
			my %memberAttributes = attributesToHash $memberData->getAttributes;
			my $UCO = $memberAttributes{$A_UF_LOGIN};
			my $UPN = $users->{$UCO}->{$UPN_TEXT};

			if($onResourceBookInPolicy) { push @resBookInPolicy, $UPN; }
			if($onResourceRequestInPolicy) { push @resReqInPolicy, $UPN; }
			if($onResourceRequestOutOfPolicy) { push @resReqOutOfPolicy, $UPN; }
			if($onResourceDelegates) { push @resDelegates, $UPN; }
		}
	}

    $resourceMails->{$resName}->{$RES_DELEGATES_TEXT} =  \@resDelegates;
	$resourceMails->{$resName}->{$RES_BOOK_IN_POLICY_TEXT} = \@resBookInPolicy;
	$resourceMails->{$resName}->{$RES_REQUEST_IN_POLICY_TEXT} = \@resReqInPolicy;
	$resourceMails->{$resName}->{$RES_REQUEST_OUT_OF_POLICY_TEXT} = \@resReqOutOfPolicy;
}

# input: memberData structure from resource
# process data for member on resource (it is used for users data in o365)
sub processResourceMember {
		my $memberData = shift;

		my %memberAttributes = attributesToHash $memberData->getAttributes;

		my $UCO = $memberAttributes{$A_UF_LOGIN};
		my $disableForward = $memberAttributes{$A_UF_DISABLE_MAIL_FORWARD};
		my $licence = $memberAttributes{$A_UF_O365_LICENCE};

		#if member has no licence, skip him
		unless($licence) {
			$skippedUsers->{$UCO} = 1;
			return;
		}

		#if mail forward is not set use the default value unless forwarding is disabled for that user
		my $mailForward = $memberAttributes{$A_UF_O365_MAIL_FORWARD} || $UCO . $DEFAULT_FORWARDING_DOMAIN unless $disableForward;

		my $archive = $memberAttributes{$A_UF_O365_ARCHIVE};
		my $storeAndForward = $memberAttributes{$A_UF_O365_STORE_AND_FORWARD};
		my $preferedLanguage = $memberAttributes{$A_U_F_O365_PREFERRED_LANGUAGE};
		my @emailsArray = ();
		if(defined($memberAttributes{$A_U_O365_MAIL_ADDRS})) {
			@emailsArray = @{$memberAttributes{$A_U_O365_MAIL_ADDRS}};
		} else {
			warn "Can't find emails for user with UCO: $UCO \n";
		}

		unless($users->{$UCO}) {
			$users->{$UCO}->{$UPN_TEXT} = $UCO . "@" . $domainName;
			$users->{$UCO}->{$MAIL_FORWARD_TEXT} = $mailForward ? $mailForward : "";
			$users->{$UCO}->{$ARCHIVE_TEXT} = $archive ? $JSON::XS::true : $JSON::XS::false;
			$users->{$UCO}->{$STORE_AND_FORWARD_TEXT} = $storeAndForward ? $JSON::XS::true : $JSON::XS::false;
			$users->{$UCO}->{$EMAIL_ADDRESSES} = \@emailsArray;
			$users->{$UCO}->{$PREFERED_LANGUAGE} = $preferedLanguage;
			$users->{$UCO}->{$TIMEZONE} = "Central Europe Standard Time";
		}
}

# input: groupData from resource (defined as o365 group)
# process group from resource defined as o365
sub processGroup {
	my $groupData = shift;

	my %groupAttributes = attributesToHash $groupData->getAttributes;
	my $groupADName = $groupAttributes{$A_GR_AD_NAME};

	if($groupADName) {
		#all groups for mu should have specific part of name
		my $groupADName = $groupAttributes{$A_GR_AD_NAME} . '_group.muni.cz';
		$groups->{$groupADName} = undef;

		foreach my $member(($groupData->getChildElements)[1]->getChildElements) {
			processGroupMember $member, $groupADName;
		}
	}
}

# input: memberData from group assigned to resource, group ad name
# process member of the group
sub processGroupMember {
	my $memberData = shift;
	my $groupADName = shift;


	my %memberAttributes = attributesToHash $memberData->getAttributes;
	my $UCO = $memberAttributes{$A_UF_LOGIN};
	#skipped user which has no licence
	if($skippedUsers->{$UCO}) {
		return;
	}
	my $UPN = $users->{$UCO}->{$UPN_TEXT};
	my $sendAsGroup = $memberAttributes{$A_MR_O365_SEND_AS};
	if($sendAsGroup) { $groups->{$groupADName}->{$UPN} = 1; }
}

# input: file name for users data, usersData structure
# save data about users to file
sub saveUsersToFile {
	my $fileName = shift;
	my $usersData = shift;
    my @output = ();
    my $user;

	foreach my $UCO (sort keys %$usersData) {
        $user = {};
        $user->{"upn"} = $usersData->{$UCO}->{$UPN_TEXT};
        $user->{"forwardingSmtpAddress"} = $usersData->{$UCO}->{$MAIL_FORWARD_TEXT};
        $user->{"archive"} = $usersData->{$UCO}->{$ARCHIVE_TEXT};
        $user->{"deliverToMailboxAndForward"} = $usersData->{$UCO}->{$STORE_AND_FORWARD_TEXT};
        $user->{"emailAddresses"} = $usersData->{$UCO}->{$EMAIL_ADDRESSES};
        $user->{"language"} = $usersData->{$UCO}->{$PREFERED_LANGUAGE} ? $usersData->{$UCO}->{$PREFERED_LANGUAGE} : undef;
        $user->{"timeZone"} = $usersData->{$UCO}->{$TIMEZONE};
        push @output, $user;
	}

	open FILE,">:encoding(UTF-8)","$fileName" or die "Cannot open $fileName: $! \n";
    binmode FILE, ":utf8";
    print FILE JSON::XS->new->utf8->pretty->encode(\@output);
    close FILE;
}

# input:  file name for groups data, groupsData structure
# save data about groups to the file
sub saveGroupsToFile {
	my $fileName = shift;
	my $groupsData = shift;
    my @output = ();
    my $group;

	foreach my $adName (sort keys %$groupsData) {
        $group = {};
		my @contacts = ();
		@contacts = sort keys %{$groupsData->{$adName}};
        $group->{"groupName"} = $adName;
        $group->{"sendAs"} = \@contacts;
        push @output, $group;
	}

    open FILE,">:encoding(UTF-8)","$fileName" or die "Cannot open $fileName: $! \n";
    binmode FILE, ":utf8";
    print FILE JSON::XS->new->utf8->pretty->encode(\@output);
    close FILE;
}

# input: file name for resource mailing lists data, resourceMailsData structure
# save data about resource mailing lists to the file
sub saveResourceMailsToFile {
	my $fileName = shift;
	my $resourceMailsData = shift;
    my @output = ();
    
	foreach my $resourceMailName (sort keys %$resourceMailsData) {
		my $item = {};

		$item->{"Name"} = $resourceMailsData->{$resourceMailName}->{$RES_NAME_TEXT};
		$item->{"Alias"} = $resourceMailsData->{$resourceMailName}->{$RES_ALIAS_TEXT};
		$item->{"EmailAddresses"} = $resourceMailsData->{$resourceMailName}->{$RES_EMAIL_ADDRESES_TEXT};
		$item->{"DisplayName"} = $resourceMailsData->{$resourceMailName}->{$RES_DISPLAY_NAME_TEXT};
		$item->{"Type"} = $resourceMailsData->{$resourceMailName}->{$RES_TYPE_TEXT};
		$item->{"ResourceCapacity"} = $resourceMailsData->{$resourceMailName}->{$RES_CAPACITY_TEXT};
		$item->{"AdditionalResponse"} = $resourceMailsData->{$resourceMailName}->{$RES_ADDITIONAL_RESPONSE_TEXT};
		$item->{"ProcessExternalMeetingMessages"} = $resourceMailsData->{$resourceMailName}->{$RES_EXT_MEETING_MSG_TEXT};
		$item->{"AllowConflicts"} = $resourceMailsData->{$resourceMailName}->{$RES_ALLOW_CONFLICTS_TEXT};
		$item->{"BookingWindowInDays"} = $resourceMailsData->{$resourceMailName}->{$RES_BOOKING_WINDOW_TEXT};
		$item->{"ConflictPercentageAllowed"} = $resourceMailsData->{$resourceMailName}->{$RES_PERCENTAGE_ALLOWED_TEXT};
		$item->{"EnforceSchedulingHorizon"} = $resourceMailsData->{$resourceMailName}->{$RES_ENFORCE_SCHED_HORIZON_TEXT};
		$item->{"MaximumConflictInstances"} = $resourceMailsData->{$resourceMailName}->{$RES_MAX_CONFLICT_INSTANCES_TEXT};
		$item->{"MaximumDurationInMinutes"} = $resourceMailsData->{$resourceMailName}->{$RES_MAX_DURATION_TEXT};
		$item->{"ScheduleOnlyDuringWorkHours"} = $resourceMailsData->{$resourceMailName}->{$RES_SCHED_DURING_WORK_HOURS_TEXT};
		$item->{"AllBookInPolicy"} = $resourceMailsData->{$resourceMailName}->{$RES_ALL_BOOK_IN_POLICY_TEXT};
		$item->{"AllRequestInPolicy"} = $resourceMailsData->{$resourceMailName}->{$RES_ALL_REQ_IN_POLICY_TEXT};
		$item->{"AllRequestOutOfPolicy"} = $resourceMailsData->{$resourceMailName}->{$RES_ALL_REQ_OUT_OF_POLICY_TEXT};
		$item->{"Workdays"} = $resourceMailsData->{$resourceMailName}->{$RES_WORKDAYS_TEXT};
		$item->{"WorkingHoursStartTime"} = $resourceMailsData->{$resourceMailName}->{$RES_WORKING_HOURS_START_TIME_TEXT};
		$item->{"WorkingHoursEndTime"} = $resourceMailsData->{$resourceMailName}->{$RES_WORKING_HOURS_END_TIME_TEXT};
		$item->{"AllowRecurringMeetings"} = $resourceMailsData->{$resourceMailName}->{$RES_ALLOW_RECURRING_MEETINGS_TEXT};
		$item->{"AddAdditionalResponse"} = $resourceMailsData->{$resourceMailName}->{$RES_ADD_ADDITIONAL_RESPONSE_TEXT};
		$item->{"ResourceDelegates"} = $resourceMailsData->{$resourceMailName}->{$RES_DELEGATES_TEXT};
		$item->{"BookInPolicy"} = $resourceMailsData->{$resourceMailName}->{$RES_BOOK_IN_POLICY_TEXT};
		$item->{"RequestInPolicy"} = $resourceMailsData->{$resourceMailName}->{$RES_REQUEST_IN_POLICY_TEXT};
		$item->{"RequestOutOfPolicy"} = $resourceMailsData->{$resourceMailName}->{$RES_REQUEST_OUT_OF_POLICY_TEXT};

        push @output, $item;
	}

    open FILE,">:encoding(UTF-8)","$fileName" or die "Cannot open $fileName: $! \n";
    binmode FILE, ":utf8";
    print FILE JSON::XS->new->utf8->pretty->encode(\@output);
    close FILE;
}
